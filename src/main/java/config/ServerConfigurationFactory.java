package config;

import com.mchange.v2.c3p0.ComboPooledDataSource;

import java.io.InputStream;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Properties;
import javax.cache.configuration.Factory;
import javax.sql.DataSource;

import org.apache.ignite.cache.CacheAtomicityMode;
import org.apache.ignite.cache.CacheMode;
import org.apache.ignite.cache.QueryEntity;
import org.apache.ignite.cache.QueryIndex;
import org.apache.ignite.cache.QueryIndexType;
import org.apache.ignite.cache.store.jdbc.CacheJdbcPojoStoreFactory;
import org.apache.ignite.cache.store.jdbc.JdbcType;
import org.apache.ignite.cache.store.jdbc.JdbcTypeField;
import org.apache.ignite.cache.store.jdbc.dialect.BasicJdbcDialect;
import org.apache.ignite.configuration.CacheConfiguration;
import org.apache.ignite.configuration.IgniteConfiguration;
import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;
import org.apache.ignite.spi.discovery.tcp.ipfinder.multicast.TcpDiscoveryMulticastIpFinder;

/**
 * This file was generated by Ignite Web Console (10/12/2020, 17:13)
 **/
public class ServerConfigurationFactory {
    /**
     * Secret properties loading.
     **/
    private static final Properties props = new Properties();

    static {
        try (InputStream in = IgniteConfiguration.class.getClassLoader().getResourceAsStream("secret.properties")) {
            props.load(in);
        } catch (Exception ignored) {
            // No-op.
        }
    }

    /**
     * Helper class for datasource creation.
     **/
    public static class DataSources {
        public static final ComboPooledDataSource INSTANCE_dsGeneric_DcBid = createdsGeneric_DcBid();

        private static ComboPooledDataSource createdsGeneric_DcBid() {
            ComboPooledDataSource dsGeneric_DcBid = new ComboPooledDataSource();

            dsGeneric_DcBid.setJdbcUrl(props.getProperty("dsGeneric_DcBid.jdbc.url"));
            dsGeneric_DcBid.setUser(props.getProperty("dsGeneric_DcBid.jdbc.username"));
            dsGeneric_DcBid.setPassword(props.getProperty("dsGeneric_DcBid.jdbc.password"));
            return dsGeneric_DcBid;
        }
    }

    /**
     * Configure grid.
     *
     * @return Ignite configuration.
     * @throws Exception If failed to construct Ignite configuration instance.
     **/
    public static IgniteConfiguration createConfiguration() throws Exception {
        IgniteConfiguration cfg = new IgniteConfiguration();

        cfg.setIgniteInstanceName("ImportedCluster2");

        TcpDiscoverySpi discovery = new TcpDiscoverySpi();

        TcpDiscoveryMulticastIpFinder ipFinder = new TcpDiscoveryMulticastIpFinder();

        ipFinder.setAddresses(Arrays.asList("127.0.0.1:47500..47510"));

        discovery.setIpFinder(ipFinder);

        cfg.setDiscoverySpi(discovery);

        cfg.setCacheConfiguration(
                cacheBaseDepartmentCache(),
                cacheBaseJobCache(),
                cacheBaseUserCache(),
                cacheBaseUserJobCache(),
                cacheBusinessCache(),
                cacheBusinessOnlineInfoCache(),
                cacheBusinessSupporterCache(),
                cacheCrmResultCache(),
                cacheCrmDepartResultCache()
        );

        return cfg;
    }

    private static JdbcType jdbcTypeCrmDepartResult(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType("model.CrmDepartResultKey");
        type.setValueType("model.CrmDepartResult");
        type.setDatabaseSchema("test_ignite");
        type.setDatabaseTable("crm_depart_result");

        type.setKeyFields(
                new JdbcTypeField(Types.INTEGER, "depart_id", int.class, "departId"),
                new JdbcTypeField(Types.INTEGER, "year", int.class, "year"),
                new JdbcTypeField(Types.INTEGER, "month", int.class, "month")
        );

        type.setValueFields(
                new JdbcTypeField(Types.INTEGER, "online_business_count", Integer.class, "onlineBusinessCount"),
                new JdbcTypeField(Types.INTEGER, "online_business_customer_count", Integer.class, "onlineBusinessCustomerCount"),
                new JdbcTypeField(Types.VARCHAR, "online_business_amount", String.class, "onlineBusinessAmount")
        );

        return type;
    }


    public static CacheConfiguration cacheCrmDepartResultCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("CRMDEPTRESULT");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override
            public DataSource create() {
                return DataSources.INSTANCE_dsGeneric_DcBid;
            }

            ;
        });

        cacheStoreFactory.setDialect(new BasicJdbcDialect());

        cacheStoreFactory.setTypes(jdbcTypeCrmDepartResult(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("model.CrmDepartResultKey");
        qryEntity.setValueType("model.CrmDepartResult");
        qryEntity.setTableName("crm_depart_result");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("departId");

        keyFields.add("year");

        keyFields.add("month");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("departId", "java.lang.Integer");
        fields.put("year", "java.lang.Integer");
        fields.put("month", "java.lang.Integer");
        fields.put("onlineBusinessCount", "java.lang.Integer");
        fields.put("onlineBusinessCustomerCount", "java.lang.Integer");
        fields.put("onlineBusinessAmount", "java.lang.String");

        qryEntity.setFields(fields);

        HashMap<String, String> aliases = new HashMap<>();

        aliases.put("departId", "depart_id");
        aliases.put("onlineBusinessCount", "online_business_count");
        aliases.put("onlineBusinessCustomerCount", "online_business_customer_count");
        aliases.put("onlineBusinessAmount", "online_business_amount");

        qryEntity.setAliases(aliases);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }


    /**
     * Create configuration for cache "BaseDepartmentCache".
     *
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheBaseDepartmentCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("CRMBASEDEPT");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override
            public DataSource create() {
                return DataSources.INSTANCE_dsGeneric_DcBid;
            }

            ;
        });

        cacheStoreFactory.setDialect(new BasicJdbcDialect());

        cacheStoreFactory.setTypes(jdbcTypeBaseDepartment(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.Integer");
        qryEntity.setValueType("model.BaseDepartment");
        qryEntity.setTableName("base_department");
        qryEntity.setKeyFieldName("departId");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("departId");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("departName", "java.lang.String");
        fields.put("departType", "java.lang.String");
        fields.put("departAddress", "java.lang.String");
        fields.put("departPhone", "java.lang.String");
        fields.put("departCode", "java.lang.String");
        fields.put("orgId", "java.lang.String");
        fields.put("parentId", "java.lang.String");
        fields.put("departProvince", "java.lang.Integer");
        fields.put("departCity", "java.lang.Integer");
        fields.put("departDistrict", "java.lang.Integer");
        fields.put("delFlg", "java.lang.Boolean");
        fields.put("createTime", "java.sql.Timestamp");
        fields.put("createUser", "java.lang.String");
        fields.put("updateTime", "java.sql.Timestamp");
        fields.put("updateUser", "java.lang.String");
        fields.put("departId", "java.lang.Integer");

        qryEntity.setFields(fields);

        HashMap<String, String> aliases = new HashMap<>();

        aliases.put("departId", "depart_id");
        aliases.put("departName", "depart_name");
        aliases.put("departType", "depart_type");
        aliases.put("departAddress", "depart_address");
        aliases.put("departPhone", "depart_phone");
        aliases.put("departCode", "depart_code");
        aliases.put("orgId", "org_id");
        aliases.put("parentId", "parent_id");
        aliases.put("departProvince", "depart_province");
        aliases.put("departCity", "depart_city");
        aliases.put("departDistrict", "depart_district");
        aliases.put("delFlg", "del_flg");
        aliases.put("createTime", "create_time");
        aliases.put("createUser", "create_user");
        aliases.put("updateTime", "update_time");
        aliases.put("updateUser", "update_user");

        qryEntity.setAliases(aliases);

        ArrayList<QueryIndex> indexes = new ArrayList<>();

        QueryIndex index = new QueryIndex();

        index.setName("idx_org_id");
        index.setIndexType(QueryIndexType.SORTED);

        LinkedHashMap<String, Boolean> indFlds = new LinkedHashMap<>();

        indFlds.put("orgId", false);

        index.setFields(indFlds);
        indexes.add(index);

        qryEntity.setIndexes(indexes);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create JDBC type for "jdbcTypeBaseDepartment".
     *
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     **/
    private static JdbcType jdbcTypeBaseDepartment(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType(Integer.class);
        type.setValueType("model.BaseDepartment");
        type.setDatabaseSchema("test_ignite");
        type.setDatabaseTable("base_department");

        type.setKeyFields(new JdbcTypeField(Types.INTEGER, "depart_id", int.class, "departId"));

        type.setValueFields(
                new JdbcTypeField(Types.VARCHAR, "depart_name", String.class, "departName"),
                new JdbcTypeField(Types.VARCHAR, "depart_type", String.class, "departType"),
                new JdbcTypeField(Types.VARCHAR, "depart_address", String.class, "departAddress"),
                new JdbcTypeField(Types.VARCHAR, "depart_phone", String.class, "departPhone"),
                new JdbcTypeField(Types.VARCHAR, "depart_code", String.class, "departCode"),
                new JdbcTypeField(Types.VARCHAR, "org_id", String.class, "orgId"),
                new JdbcTypeField(Types.VARCHAR, "parent_id", String.class, "parentId"),
                new JdbcTypeField(Types.INTEGER, "depart_province", Integer.class, "departProvince"),
                new JdbcTypeField(Types.INTEGER, "depart_city", Integer.class, "departCity"),
                new JdbcTypeField(Types.INTEGER, "depart_district", Integer.class, "departDistrict"),
                new JdbcTypeField(Types.BIT, "del_flg", boolean.class, "delFlg"),
                new JdbcTypeField(Types.TIMESTAMP, "create_time", Timestamp.class, "createTime"),
                new JdbcTypeField(Types.VARCHAR, "create_user", String.class, "createUser"),
                new JdbcTypeField(Types.TIMESTAMP, "update_time", Timestamp.class, "updateTime"),
                new JdbcTypeField(Types.VARCHAR, "update_user", String.class, "updateUser")
        );

        return type;
    }

    /**
     * Create configuration for cache "BaseJobCache".
     *
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheBaseJobCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("CRMBASEJOB");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override
            public DataSource create() {
                return DataSources.INSTANCE_dsGeneric_DcBid;
            }

            ;
        });

        cacheStoreFactory.setDialect(new BasicJdbcDialect());

        cacheStoreFactory.setTypes(jdbcTypeBaseJob(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.Integer");
        qryEntity.setValueType("model.BaseJob");
        qryEntity.setTableName("base_job");
        qryEntity.setKeyFieldName("jobId");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("jobId");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("jobName", "java.lang.String");
        fields.put("departId", "java.lang.Integer");
        fields.put("parentId", "java.lang.String");
        fields.put("maxCustomerNum", "java.lang.Integer");
        fields.put("noSensitiveFlag", "java.lang.Byte");
        fields.put("jobType", "java.lang.String");
        fields.put("delFlg", "java.lang.Boolean");
        fields.put("createUser", "java.lang.Integer");
        fields.put("createTime", "java.sql.Timestamp");
        fields.put("updateTime", "java.sql.Timestamp");
        fields.put("updateUser", "java.lang.Integer");
        fields.put("highLayerFollowCount", "java.lang.Integer");
        fields.put("jobId", "java.lang.Integer");

        qryEntity.setFields(fields);

        HashMap<String, String> aliases = new HashMap<>();

        aliases.put("jobId", "job_id");
        aliases.put("jobName", "job_name");
        aliases.put("departId", "depart_id");
        aliases.put("parentId", "parent_id");
        aliases.put("maxCustomerNum", "max_customer_num");
        aliases.put("noSensitiveFlag", "no_sensitive_flag");
        aliases.put("jobType", "job_type");
        aliases.put("delFlg", "del_flg");
        aliases.put("createUser", "create_user");
        aliases.put("createTime", "create_time");
        aliases.put("updateTime", "update_time");
        aliases.put("updateUser", "update_user");
        aliases.put("highLayerFollowCount", "high_layer_follow_count");

        qryEntity.setAliases(aliases);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create JDBC type for "jdbcTypeBaseJob".
     *
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     **/
    private static JdbcType jdbcTypeBaseJob(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType(Integer.class);
        type.setValueType("model.BaseJob");
        type.setDatabaseSchema("test_ignite");
        type.setDatabaseTable("base_job");

        type.setKeyFields(new JdbcTypeField(Types.INTEGER, "job_id", int.class, "jobId"));

        type.setValueFields(
                new JdbcTypeField(Types.VARCHAR, "job_name", String.class, "jobName"),
                new JdbcTypeField(Types.INTEGER, "depart_id", int.class, "departId"),
                new JdbcTypeField(Types.VARCHAR, "parent_id", String.class, "parentId"),
                new JdbcTypeField(Types.INTEGER, "max_customer_num", Integer.class, "maxCustomerNum"),
                new JdbcTypeField(Types.TINYINT, "no_sensitive_flag", Byte.class, "noSensitiveFlag"),
                new JdbcTypeField(Types.VARCHAR, "job_type", String.class, "jobType"),
                new JdbcTypeField(Types.BIT, "del_flg", boolean.class, "delFlg"),
                new JdbcTypeField(Types.INTEGER, "create_user", int.class, "createUser"),
                new JdbcTypeField(Types.TIMESTAMP, "create_time", Timestamp.class, "createTime"),
                new JdbcTypeField(Types.TIMESTAMP, "update_time", Timestamp.class, "updateTime"),
                new JdbcTypeField(Types.INTEGER, "update_user", Integer.class, "updateUser"),
                new JdbcTypeField(Types.INTEGER, "high_layer_follow_count", Integer.class, "highLayerFollowCount")
        );

        return type;
    }

    /**
     * Create configuration for cache "BaseUserCache".
     *
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheBaseUserCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("CRMBASEUSER");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override
            public DataSource create() {
                return DataSources.INSTANCE_dsGeneric_DcBid;
            }

            ;
        });

        cacheStoreFactory.setDialect(new BasicJdbcDialect());

        cacheStoreFactory.setTypes(jdbcTypeBaseUser(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.Integer");
        qryEntity.setValueType("model.BaseUser");
        qryEntity.setTableName("base_user");
        qryEntity.setKeyFieldName("userId");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("userId");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("account", "java.lang.String");
        fields.put("password", "java.lang.String");
        fields.put("userNo", "java.lang.String");
        fields.put("name", "java.lang.String");
        fields.put("sex", "java.lang.String");
        fields.put("idCard", "java.lang.String");
        fields.put("userEducation", "java.lang.String");
        fields.put("userWork", "java.lang.String");
        fields.put("maxCustomerNum", "java.lang.Integer");
        fields.put("subCompanyId", "java.lang.Integer");
        fields.put("departId", "java.lang.Integer");
        fields.put("jobId", "java.lang.Integer");
        fields.put("mobile", "java.lang.String");
        fields.put("telephone", "java.lang.String");
        fields.put("email", "java.lang.String");
        fields.put("weixin", "java.lang.String");
        fields.put("dingding", "java.lang.String");
        fields.put("userState", "java.lang.Integer");
        fields.put("userType", "java.lang.String");
        fields.put("delFlg", "java.lang.Boolean");
        fields.put("createTime", "java.sql.Timestamp");
        fields.put("createUser", "java.lang.Integer");
        fields.put("updateTime", "java.sql.Timestamp");
        fields.put("updateUser", "java.lang.Integer");
        fields.put("sendPwdFlag", "java.lang.Boolean");
        fields.put("workBase", "java.lang.String");
        fields.put("isWhite", "java.lang.Boolean");
        fields.put("userId", "java.lang.Integer");

        qryEntity.setFields(fields);

        HashMap<String, String> aliases = new HashMap<>();

        aliases.put("userId", "user_id");
        aliases.put("userNo", "user_no");
        aliases.put("idCard", "id_card");
        aliases.put("userEducation", "user_education");
        aliases.put("userWork", "user_work");
        aliases.put("maxCustomerNum", "max_customer_num");
        aliases.put("subCompanyId", "sub_company_id");
        aliases.put("departId", "depart_id");
        aliases.put("jobId", "job_id");
        aliases.put("userState", "user_state");
        aliases.put("userType", "user_type");
        aliases.put("delFlg", "del_flg");
        aliases.put("createTime", "create_time");
        aliases.put("createUser", "create_user");
        aliases.put("updateTime", "update_time");
        aliases.put("updateUser", "update_user");
        aliases.put("sendPwdFlag", "send_pwd_flag");
        aliases.put("workBase", "work_base");
        aliases.put("isWhite", "is_white");

        qryEntity.setAliases(aliases);

        ArrayList<QueryIndex> indexes = new ArrayList<>();

        QueryIndex index = new QueryIndex();

        index.setName("index_email");
        index.setIndexType(QueryIndexType.SORTED);

        LinkedHashMap<String, Boolean> indFlds = new LinkedHashMap<>();

        indFlds.put("email", false);

        index.setFields(indFlds);
        indexes.add(index);

        index = new QueryIndex();

        index.setName("index_mobile");
        index.setIndexType(QueryIndexType.SORTED);

        indFlds = new LinkedHashMap<>();

        indFlds.put("mobile", false);

        index.setFields(indFlds);
        indexes.add(index);

        index = new QueryIndex();

        index.setName("index_user_no");
        index.setIndexType(QueryIndexType.SORTED);

        indFlds = new LinkedHashMap<>();

        indFlds.put("userNo", false);

        index.setFields(indFlds);
        indexes.add(index);

        qryEntity.setIndexes(indexes);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create JDBC type for "jdbcTypeBaseUser".
     *
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     **/
    private static JdbcType jdbcTypeBaseUser(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType(Integer.class);
        type.setValueType("model.BaseUser");
        type.setDatabaseSchema("test_ignite");
        type.setDatabaseTable("base_user");

        type.setKeyFields(new JdbcTypeField(Types.INTEGER, "user_id", int.class, "userId"));

        type.setValueFields(
                new JdbcTypeField(Types.VARCHAR, "account", String.class, "account"),
                new JdbcTypeField(Types.VARCHAR, "password", String.class, "password"),
                new JdbcTypeField(Types.VARCHAR, "user_no", String.class, "userNo"),
                new JdbcTypeField(Types.VARCHAR, "name", String.class, "name"),
                new JdbcTypeField(Types.VARCHAR, "sex", String.class, "sex"),
                new JdbcTypeField(Types.VARCHAR, "id_card", String.class, "idCard"),
                new JdbcTypeField(Types.VARCHAR, "user_education", String.class, "userEducation"),
                new JdbcTypeField(Types.VARCHAR, "user_work", String.class, "userWork"),
                new JdbcTypeField(Types.INTEGER, "max_customer_num", Integer.class, "maxCustomerNum"),
                new JdbcTypeField(Types.INTEGER, "sub_company_id", Integer.class, "subCompanyId"),
                new JdbcTypeField(Types.INTEGER, "depart_id", Integer.class, "departId"),
                new JdbcTypeField(Types.INTEGER, "job_id", Integer.class, "jobId"),
                new JdbcTypeField(Types.VARCHAR, "mobile", String.class, "mobile"),
                new JdbcTypeField(Types.VARCHAR, "telephone", String.class, "telephone"),
                new JdbcTypeField(Types.VARCHAR, "email", String.class, "email"),
                new JdbcTypeField(Types.VARCHAR, "weixin", String.class, "weixin"),
                new JdbcTypeField(Types.VARCHAR, "dingding", String.class, "dingding"),
                new JdbcTypeField(Types.INTEGER, "user_state", int.class, "userState"),
                new JdbcTypeField(Types.VARCHAR, "user_type", String.class, "userType"),
                new JdbcTypeField(Types.BIT, "del_flg", boolean.class, "delFlg"),
                new JdbcTypeField(Types.TIMESTAMP, "create_time", Timestamp.class, "createTime"),
                new JdbcTypeField(Types.INTEGER, "create_user", int.class, "createUser"),
                new JdbcTypeField(Types.TIMESTAMP, "update_time", Timestamp.class, "updateTime"),
                new JdbcTypeField(Types.INTEGER, "update_user", Integer.class, "updateUser"),
                new JdbcTypeField(Types.BIT, "send_pwd_flag", boolean.class, "sendPwdFlag"),
                new JdbcTypeField(Types.VARCHAR, "work_base", String.class, "workBase"),
                new JdbcTypeField(Types.BIT, "is_white", Boolean.class, "isWhite")
        );

        return type;
    }

    /**
     * Create configuration for cache "BaseUserJobCache".
     *
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheBaseUserJobCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("CRMBASEUJ");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override
            public DataSource create() {
                return DataSources.INSTANCE_dsGeneric_DcBid;
            }

            ;
        });

        cacheStoreFactory.setDialect(new BasicJdbcDialect());

        cacheStoreFactory.setTypes(jdbcTypeBaseUserJob(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.Integer");
        qryEntity.setValueType("model.BaseUserJob");
        qryEntity.setTableName("base_user_job");
        qryEntity.setKeyFieldName("userJobId");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("userJobId");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("userId", "java.lang.Integer");
        fields.put("jobId", "java.lang.Integer");
        fields.put("departId", "java.lang.Integer");
        fields.put("orgId", "java.lang.Integer");
        fields.put("subCompanyId", "java.lang.Integer");
        fields.put("defaultFlg", "java.lang.Byte");
        fields.put("createTime", "java.sql.Timestamp");
        fields.put("createUser", "java.lang.Integer");
        fields.put("updateTime", "java.sql.Timestamp");
        fields.put("updateUser", "java.lang.Integer");
        fields.put("delFlg", "java.lang.Boolean");
        fields.put("userJobId", "java.lang.Integer");

        qryEntity.setFields(fields);

        HashMap<String, String> aliases = new HashMap<>();

        aliases.put("userJobId", "user_job_id");
        aliases.put("userId", "user_id");
        aliases.put("jobId", "job_id");
        aliases.put("departId", "depart_id");
        aliases.put("orgId", "org_id");
        aliases.put("subCompanyId", "sub_company_id");
        aliases.put("defaultFlg", "default_flg");
        aliases.put("createTime", "create_time");
        aliases.put("createUser", "create_user");
        aliases.put("updateTime", "update_time");
        aliases.put("updateUser", "update_user");
        aliases.put("delFlg", "del_flg");

        qryEntity.setAliases(aliases);

        ArrayList<QueryIndex> indexes = new ArrayList<>();

        QueryIndex index = new QueryIndex();

        index.setName("base_user_job_job_id_index");
        index.setIndexType(QueryIndexType.SORTED);

        LinkedHashMap<String, Boolean> indFlds = new LinkedHashMap<>();

        indFlds.put("jobId", false);

        index.setFields(indFlds);
        indexes.add(index);

        index = new QueryIndex();

        index.setName("base_user_job_user_id_index");
        index.setIndexType(QueryIndexType.SORTED);

        indFlds = new LinkedHashMap<>();

        indFlds.put("userId", false);

        index.setFields(indFlds);
        indexes.add(index);

        index = new QueryIndex();

        index.setName("idx_job_id");
        index.setIndexType(QueryIndexType.SORTED);

        indFlds = new LinkedHashMap<>();

        indFlds.put("jobId", false);

        index.setFields(indFlds);
        indexes.add(index);

        index = new QueryIndex();

        index.setName("idx_user_id");
        index.setIndexType(QueryIndexType.SORTED);

        indFlds = new LinkedHashMap<>();

        indFlds.put("userId", false);

        index.setFields(indFlds);
        indexes.add(index);

        qryEntity.setIndexes(indexes);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create JDBC type for "jdbcTypeBaseUserJob".
     *
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     **/
    private static JdbcType jdbcTypeBaseUserJob(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType(Integer.class);
        type.setValueType("model.BaseUserJob");
        type.setDatabaseSchema("test_ignite");
        type.setDatabaseTable("base_user_job");

        type.setKeyFields(new JdbcTypeField(Types.INTEGER, "user_job_id", int.class, "userJobId"));

        type.setValueFields(
                new JdbcTypeField(Types.INTEGER, "user_id", int.class, "userId"),
                new JdbcTypeField(Types.INTEGER, "job_id", int.class, "jobId"),
                new JdbcTypeField(Types.INTEGER, "depart_id", Integer.class, "departId"),
                new JdbcTypeField(Types.INTEGER, "org_id", Integer.class, "orgId"),
                new JdbcTypeField(Types.INTEGER, "sub_company_id", Integer.class, "subCompanyId"),
                new JdbcTypeField(Types.TINYINT, "default_flg", Byte.class, "defaultFlg"),
                new JdbcTypeField(Types.TIMESTAMP, "create_time", Timestamp.class, "createTime"),
                new JdbcTypeField(Types.INTEGER, "create_user", Integer.class, "createUser"),
                new JdbcTypeField(Types.TIMESTAMP, "update_time", Timestamp.class, "updateTime"),
                new JdbcTypeField(Types.INTEGER, "update_user", Integer.class, "updateUser"),
                new JdbcTypeField(Types.BIT, "del_flg", Boolean.class, "delFlg")
        );

        return type;
    }

    /**
     * Create configuration for cache "BusinessCache".
     *
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheBusinessCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("CRMBUSINESS");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override
            public DataSource create() {
                return DataSources.INSTANCE_dsGeneric_DcBid;
            }

            ;
        });

        cacheStoreFactory.setDialect(new BasicJdbcDialect());

        cacheStoreFactory.setTypes(jdbcTypeBusiness(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.Integer");
        qryEntity.setValueType("model.Business");
        qryEntity.setKeyFieldName("businessId");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("businessId");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("customerId", "java.lang.Integer");
        fields.put("name", "java.lang.String");
        fields.put("modifyName", "java.lang.String");
        fields.put("businessCode", "java.lang.String");
        fields.put("origin", "java.lang.String");
        fields.put("description", "java.lang.String");
        fields.put("level", "java.lang.String");
        fields.put("industryLevelOne", "java.lang.String");
        fields.put("industryLevelTwo", "java.lang.String");
        fields.put("phaseOneCompleteTime", "java.sql.Timestamp");
        fields.put("phaseTwoCompleteTime", "java.sql.Timestamp");
        fields.put("phaseThreeCompleteTime", "java.sql.Timestamp");
        fields.put("phaseFourCompleteTime", "java.sql.Timestamp");
        fields.put("phase", "java.lang.Byte");
        fields.put("businessStatus", "java.lang.Byte");
        fields.put("restartStatus", "java.lang.Boolean");
        fields.put("expectAmount", "java.math.BigDecimal");
        fields.put("expectTime", "java.sql.Timestamp");
        fields.put("expectMedia", "java.lang.String");
        fields.put("expectCity", "java.lang.String");
        fields.put("expectNum", "java.lang.Integer");
        fields.put("expectFrequency", "java.lang.String");
        fields.put("actualNum", "java.lang.Integer");
        fields.put("actualFrequency", "java.lang.String");
        fields.put("mediaAttitude", "java.lang.String");
        fields.put("belongUserId", "java.lang.Integer");
        fields.put("createUser", "java.lang.Integer");
        fields.put("createTime", "java.sql.Timestamp");
        fields.put("updateUser", "java.lang.Integer");
        fields.put("updateTime", "java.sql.Timestamp");
        fields.put("remark", "java.lang.String");
        fields.put("failReason", "java.lang.String");
        fields.put("closeReason", "java.lang.String");
        fields.put("acceptProposalFlag", "java.lang.Boolean");
        fields.put("acceptQuoteFlag", "java.lang.Boolean");
        fields.put("communicateMaterialFlag", "java.lang.Boolean");
        fields.put("comfirmPlanFlag", "java.lang.Boolean");
        fields.put("comfirmMaterialFlag", "java.lang.Boolean");
        fields.put("jobId", "java.lang.Integer");
        fields.put("orgId", "java.lang.Integer");
        fields.put("departId", "java.lang.Integer");
        fields.put("proposalCustomerFlag", "java.lang.Boolean");
        fields.put("confirmPointFlag", "java.lang.Boolean");
        fields.put("preSignContractDate", "java.sql.Timestamp");
        fields.put("contractTakeBackDate", "java.sql.Timestamp");
        fields.put("contractTakeBackFlag", "java.lang.Boolean");
        fields.put("issueFlag", "java.lang.Boolean");
        fields.put("businessLevel", "java.lang.String");
        fields.put("accompanyNum", "java.lang.Integer");
        fields.put("syncSys", "java.lang.Boolean");
        fields.put("dealAmount", "java.math.BigDecimal");
        fields.put("dealTime", "java.sql.Timestamp");
        fields.put("onlineDate", "java.sql.Timestamp");
        fields.put("offlineDate", "java.sql.Timestamp");
        fields.put("closeTime", "java.sql.Timestamp");
        fields.put("businessType", "java.lang.String");
        fields.put("contractSigningType", "java.lang.String");
        fields.put("mediaRecognized", "java.lang.Boolean");
        fields.put("hasBudget", "java.lang.Boolean");
        fields.put("hasLaunchPlan", "java.lang.Boolean");
        fields.put("kpVisited", "java.lang.Boolean");
        fields.put("launchCityPointConfirmed", "java.lang.Boolean");
        fields.put("materialConfirmed", "java.lang.Boolean");
        fields.put("processingContract", "java.lang.Boolean");
        fields.put("priceDiscount", "java.math.BigDecimal");
        fields.put("priceDiscountRatio", "java.math.BigDecimal");
        fields.put("priceDiscountTime", "java.sql.Timestamp");
        fields.put("quoteDiscount", "java.math.BigDecimal");
        fields.put("quoteDiscountRatio", "java.math.BigDecimal");
        fields.put("quoteDiscountTime", "java.sql.Timestamp");
        fields.put("businessOpportunityType", "java.lang.String");
        fields.put("dealResource", "java.lang.String");
        fields.put("discount", "java.math.BigDecimal");
        fields.put("zhitouFlag", "java.lang.Boolean");
        fields.put("zhitouPlanFlag", "java.lang.Boolean");
        fields.put("zhitouPlanId", "java.lang.Integer");
        fields.put("closeReasonType", "java.lang.String");
        fields.put("pushFlag", "java.lang.Boolean");
        fields.put("businessId", "java.lang.Integer");

        qryEntity.setFields(fields);

        HashMap<String, String> aliases = new HashMap<>();

        aliases.put("businessId", "business_id");
        aliases.put("customerId", "customer_id");
        aliases.put("modifyName", "modify_name");
        aliases.put("businessCode", "business_code");
        aliases.put("industryLevelOne", "industry_level_one");
        aliases.put("industryLevelTwo", "industry_level_two");
        aliases.put("phaseOneCompleteTime", "phase_one_complete_time");
        aliases.put("phaseTwoCompleteTime", "phase_two_complete_time");
        aliases.put("phaseThreeCompleteTime", "phase_three_complete_time");
        aliases.put("phaseFourCompleteTime", "phase_four_complete_time");
        aliases.put("businessStatus", "business_status");
        aliases.put("restartStatus", "restart_status");
        aliases.put("expectAmount", "expect_amount");
        aliases.put("expectTime", "expect_time");
        aliases.put("expectMedia", "expect_media");
        aliases.put("expectCity", "expect_city");
        aliases.put("expectNum", "expect_num");
        aliases.put("expectFrequency", "expect_frequency");
        aliases.put("actualNum", "actual_num");
        aliases.put("actualFrequency", "actual_frequency");
        aliases.put("mediaAttitude", "media_attitude");
        aliases.put("belongUserId", "belong_user_id");
        aliases.put("createUser", "create_user");
        aliases.put("createTime", "create_time");
        aliases.put("updateUser", "update_user");
        aliases.put("updateTime", "update_time");
        aliases.put("failReason", "fail_reason");
        aliases.put("closeReason", "close_reason");
        aliases.put("acceptProposalFlag", "accept_proposal_flag");
        aliases.put("acceptQuoteFlag", "accept_quote_flag");
        aliases.put("communicateMaterialFlag", "communicate_material_flag");
        aliases.put("comfirmPlanFlag", "comfirm_plan_flag");
        aliases.put("comfirmMaterialFlag", "comfirm_material_flag");
        aliases.put("jobId", "job_id");
        aliases.put("orgId", "org_id");
        aliases.put("departId", "depart_id");
        aliases.put("proposalCustomerFlag", "proposal_customer_flag");
        aliases.put("confirmPointFlag", "confirm_point_flag");
        aliases.put("preSignContractDate", "pre_sign_contract_date");
        aliases.put("contractTakeBackDate", "contract_take_back_date");
        aliases.put("contractTakeBackFlag", "contract_take_back_flag");
        aliases.put("issueFlag", "issue_flag");
        aliases.put("businessLevel", "business_level");
        aliases.put("accompanyNum", "accompany_num");
        aliases.put("syncSys", "sync_sys");
        aliases.put("dealAmount", "deal_amount");
        aliases.put("dealTime", "deal_time");
        aliases.put("onlineDate", "online_date");
        aliases.put("offlineDate", "offline_date");
        aliases.put("closeTime", "close_time");
        aliases.put("businessType", "business_type");
        aliases.put("contractSigningType", "contract_signing_type");
        aliases.put("mediaRecognized", "media_recognized");
        aliases.put("hasBudget", "has_budget");
        aliases.put("hasLaunchPlan", "has_launch_plan");
        aliases.put("kpVisited", "kp_visited");
        aliases.put("launchCityPointConfirmed", "launch_city_point_confirmed");
        aliases.put("materialConfirmed", "material_confirmed");
        aliases.put("processingContract", "processing_contract");
        aliases.put("priceDiscount", "price_discount");
        aliases.put("priceDiscountRatio", "price_discount_ratio");
        aliases.put("priceDiscountTime", "price_discount_time");
        aliases.put("quoteDiscount", "quote_discount");
        aliases.put("quoteDiscountRatio", "quote_discount_ratio");
        aliases.put("quoteDiscountTime", "quote_discount_time");
        aliases.put("businessOpportunityType", "business_opportunity_type");
        aliases.put("dealResource", "deal_resource");
        aliases.put("zhitouFlag", "zhitou_flag");
        aliases.put("zhitouPlanFlag", "zhitou_plan_flag");
        aliases.put("zhitouPlanId", "zhitou_plan_id");
        aliases.put("closeReasonType", "close_reason_type");
        aliases.put("pushFlag", "push_flag");

        qryEntity.setAliases(aliases);

        ArrayList<QueryIndex> indexes = new ArrayList<>();

        QueryIndex index = new QueryIndex();

        index.setName("idx_belong_user_expect_time_phase");
        index.setIndexType(QueryIndexType.SORTED);

        LinkedHashMap<String, Boolean> indFlds = new LinkedHashMap<>();

        indFlds.put("belongUserId", false);
        indFlds.put("expectTime", false);
        indFlds.put("businessStatus", false);
        indFlds.put("restartStatus", false);
        indFlds.put("phase", false);

        index.setFields(indFlds);
        indexes.add(index);

        index = new QueryIndex();

        index.setName("idx_business_org_expect_time");
        index.setIndexType(QueryIndexType.SORTED);

        indFlds = new LinkedHashMap<>();

        indFlds.put("businessType", false);
        indFlds.put("orgId", false);
        indFlds.put("expectTime", false);

        index.setFields(indFlds);
        indexes.add(index);

        index = new QueryIndex();

        index.setName("idx_customer_id");
        index.setIndexType(QueryIndexType.SORTED);

        indFlds = new LinkedHashMap<>();

        indFlds.put("customerId", false);

        index.setFields(indFlds);
        indexes.add(index);

        index = new QueryIndex();

        index.setName("idx_job_id");
        index.setIndexType(QueryIndexType.SORTED);

        indFlds = new LinkedHashMap<>();

        indFlds.put("jobId", false);

        index.setFields(indFlds);
        indexes.add(index);

        index = new QueryIndex();

        index.setName("idx_org_id");
        index.setIndexType(QueryIndexType.SORTED);

        indFlds = new LinkedHashMap<>();

        indFlds.put("orgId", false);

        index.setFields(indFlds);
        indexes.add(index);

        qryEntity.setIndexes(indexes);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create JDBC type for "jdbcTypeBusiness".
     *
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     **/
    private static JdbcType jdbcTypeBusiness(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType(Integer.class);
        type.setValueType("model.Business");
        type.setDatabaseSchema("test_ignite");
        type.setDatabaseTable("business");

        type.setKeyFields(new JdbcTypeField(Types.INTEGER, "business_id", int.class, "businessId"));

        type.setValueFields(
                new JdbcTypeField(Types.INTEGER, "customer_id", int.class, "customerId"),
                new JdbcTypeField(Types.VARCHAR, "name", String.class, "name"),
                new JdbcTypeField(Types.VARCHAR, "modify_name", String.class, "modifyName"),
                new JdbcTypeField(Types.VARCHAR, "business_code", String.class, "businessCode"),
                new JdbcTypeField(Types.VARCHAR, "origin", String.class, "origin"),
                new JdbcTypeField(Types.VARCHAR, "description", String.class, "description"),
                new JdbcTypeField(Types.VARCHAR, "level", String.class, "level"),
                new JdbcTypeField(Types.VARCHAR, "industry_level_one", String.class, "industryLevelOne"),
                new JdbcTypeField(Types.VARCHAR, "industry_level_two", String.class, "industryLevelTwo"),
                new JdbcTypeField(Types.TIMESTAMP, "phase_one_complete_time", Timestamp.class, "phaseOneCompleteTime"),
                new JdbcTypeField(Types.TIMESTAMP, "phase_two_complete_time", Timestamp.class, "phaseTwoCompleteTime"),
                new JdbcTypeField(Types.TIMESTAMP, "phase_three_complete_time", Timestamp.class, "phaseThreeCompleteTime"),
                new JdbcTypeField(Types.TIMESTAMP, "phase_four_complete_time", Timestamp.class, "phaseFourCompleteTime"),
                new JdbcTypeField(Types.TINYINT, "PHASE", Byte.class, "phase"),
                new JdbcTypeField(Types.TINYINT, "business_status", byte.class, "businessStatus"),
                new JdbcTypeField(Types.BIT, "restart_status", Boolean.class, "restartStatus"),
                new JdbcTypeField(Types.DECIMAL, "expect_amount", BigDecimal.class, "expectAmount"),
                new JdbcTypeField(Types.TIMESTAMP, "expect_time", Timestamp.class, "expectTime"),
                new JdbcTypeField(Types.VARCHAR, "expect_media", String.class, "expectMedia"),
                new JdbcTypeField(Types.VARCHAR, "expect_city", String.class, "expectCity"),
                new JdbcTypeField(Types.INTEGER, "expect_num", Integer.class, "expectNum"),
                new JdbcTypeField(Types.VARCHAR, "expect_frequency", String.class, "expectFrequency"),
                new JdbcTypeField(Types.INTEGER, "actual_num", Integer.class, "actualNum"),
                new JdbcTypeField(Types.VARCHAR, "actual_frequency", String.class, "actualFrequency"),
                new JdbcTypeField(Types.VARCHAR, "media_attitude", String.class, "mediaAttitude"),
                new JdbcTypeField(Types.INTEGER, "belong_user_id", Integer.class, "belongUserId"),
                new JdbcTypeField(Types.INTEGER, "create_user", Integer.class, "createUser"),
                new JdbcTypeField(Types.TIMESTAMP, "create_time", Timestamp.class, "createTime"),
                new JdbcTypeField(Types.INTEGER, "update_user", Integer.class, "updateUser"),
                new JdbcTypeField(Types.TIMESTAMP, "update_time", Timestamp.class, "updateTime"),
                new JdbcTypeField(Types.VARCHAR, "remark", String.class, "remark"),
                new JdbcTypeField(Types.VARCHAR, "fail_reason", String.class, "failReason"),
                new JdbcTypeField(Types.VARCHAR, "close_reason", String.class, "closeReason"),
                new JdbcTypeField(Types.BIT, "accept_proposal_flag", Boolean.class, "acceptProposalFlag"),
                new JdbcTypeField(Types.BIT, "accept_quote_flag", Boolean.class, "acceptQuoteFlag"),
                new JdbcTypeField(Types.BIT, "communicate_material_flag", Boolean.class, "communicateMaterialFlag"),
                new JdbcTypeField(Types.BIT, "comfirm_plan_flag", Boolean.class, "comfirmPlanFlag"),
                new JdbcTypeField(Types.BIT, "comfirm_material_flag", Boolean.class, "comfirmMaterialFlag"),
                new JdbcTypeField(Types.INTEGER, "job_id", Integer.class, "jobId"),
                new JdbcTypeField(Types.INTEGER, "org_id", Integer.class, "orgId"),
                new JdbcTypeField(Types.INTEGER, "depart_id", Integer.class, "departId"),
                new JdbcTypeField(Types.BIT, "proposal_customer_flag", Boolean.class, "proposalCustomerFlag"),
                new JdbcTypeField(Types.BIT, "confirm_point_flag", Boolean.class, "confirmPointFlag"),
                new JdbcTypeField(Types.TIMESTAMP, "pre_sign_contract_date", Timestamp.class, "preSignContractDate"),
                new JdbcTypeField(Types.TIMESTAMP, "contract_take_back_date", Timestamp.class, "contractTakeBackDate"),
                new JdbcTypeField(Types.BIT, "contract_take_back_flag", Boolean.class, "contractTakeBackFlag"),
                new JdbcTypeField(Types.BIT, "issue_flag", Boolean.class, "issueFlag"),
                new JdbcTypeField(Types.VARCHAR, "business_level", String.class, "businessLevel"),
                new JdbcTypeField(Types.INTEGER, "accompany_num", Integer.class, "accompanyNum"),
                new JdbcTypeField(Types.BIT, "sync_sys", Boolean.class, "syncSys"),
                new JdbcTypeField(Types.DECIMAL, "deal_amount", BigDecimal.class, "dealAmount"),
                new JdbcTypeField(Types.TIMESTAMP, "deal_time", Timestamp.class, "dealTime"),
                new JdbcTypeField(Types.TIMESTAMP, "online_date", Timestamp.class, "onlineDate"),
                new JdbcTypeField(Types.TIMESTAMP, "offline_date", Timestamp.class, "offlineDate"),
                new JdbcTypeField(Types.TIMESTAMP, "close_time", Timestamp.class, "closeTime"),
                new JdbcTypeField(Types.VARCHAR, "business_type", String.class, "businessType"),
                new JdbcTypeField(Types.VARCHAR, "contract_signing_type", String.class, "contractSigningType"),
                new JdbcTypeField(Types.BIT, "media_recognized", boolean.class, "mediaRecognized"),
                new JdbcTypeField(Types.BIT, "has_budget", boolean.class, "hasBudget"),
                new JdbcTypeField(Types.BIT, "has_launch_plan", boolean.class, "hasLaunchPlan"),
                new JdbcTypeField(Types.BIT, "kp_visited", boolean.class, "kpVisited"),
                new JdbcTypeField(Types.BIT, "launch_city_point_confirmed", boolean.class, "launchCityPointConfirmed"),
                new JdbcTypeField(Types.BIT, "material_confirmed", boolean.class, "materialConfirmed"),
                new JdbcTypeField(Types.BIT, "processing_contract", boolean.class, "processingContract"),
                new JdbcTypeField(Types.DECIMAL, "price_discount", BigDecimal.class, "priceDiscount"),
                new JdbcTypeField(Types.DECIMAL, "price_discount_ratio", BigDecimal.class, "priceDiscountRatio"),
                new JdbcTypeField(Types.TIMESTAMP, "price_discount_time", Timestamp.class, "priceDiscountTime"),
                new JdbcTypeField(Types.DECIMAL, "quote_discount", BigDecimal.class, "quoteDiscount"),
                new JdbcTypeField(Types.DECIMAL, "quote_discount_ratio", BigDecimal.class, "quoteDiscountRatio"),
                new JdbcTypeField(Types.TIMESTAMP, "quote_discount_time", Timestamp.class, "quoteDiscountTime"),
                new JdbcTypeField(Types.VARCHAR, "business_opportunity_type", String.class, "businessOpportunityType"),
                new JdbcTypeField(Types.VARCHAR, "deal_resource", String.class, "dealResource"),
                new JdbcTypeField(Types.DECIMAL, "discount", BigDecimal.class, "discount"),
                new JdbcTypeField(Types.BIT, "zhitou_flag", Boolean.class, "zhitouFlag"),
                new JdbcTypeField(Types.BIT, "zhitou_plan_flag", Boolean.class, "zhitouPlanFlag"),
                new JdbcTypeField(Types.INTEGER, "zhitou_plan_id", Integer.class, "zhitouPlanId"),
                new JdbcTypeField(Types.VARCHAR, "close_reason_type", String.class, "closeReasonType"),
                new JdbcTypeField(Types.BIT, "push_flag", Boolean.class, "pushFlag")
        );

        return type;
    }

    /**
     * Create configuration for cache "BusinessOnlineInfoCache".
     *
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheBusinessOnlineInfoCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("CRMBOI");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override
            public DataSource create() {
                return DataSources.INSTANCE_dsGeneric_DcBid;
            }

            ;
        });

        cacheStoreFactory.setDialect(new BasicJdbcDialect());

        cacheStoreFactory.setTypes(jdbcTypeBusinessOnlineInfo(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.Integer");
        qryEntity.setValueType("model.BusinessOnlineInfo");
        qryEntity.setTableName("business_online_info");
        qryEntity.setKeyFieldName("infoId");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("infoId");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("businessId", "java.lang.Integer");
        fields.put("year", "java.lang.Integer");
        fields.put("month", "java.lang.Integer");
        fields.put("amount", "java.math.BigDecimal");
        fields.put("createUser", "java.lang.Integer");
        fields.put("createTime", "java.sql.Timestamp");
        fields.put("updateUser", "java.lang.Integer");
        fields.put("updateTime", "java.sql.Timestamp");
        fields.put("delFlg", "java.lang.Boolean");
        fields.put("infoId", "java.lang.Integer");

        qryEntity.setFields(fields);

        HashMap<String, String> aliases = new HashMap<>();

        aliases.put("infoId", "info_id");
        aliases.put("businessId", "business_id");
        aliases.put("createUser", "create_user");
        aliases.put("createTime", "create_time");
        aliases.put("updateUser", "update_user");
        aliases.put("updateTime", "update_time");
        aliases.put("delFlg", "del_flg");

        qryEntity.setAliases(aliases);

        ArrayList<QueryIndex> indexes = new ArrayList<>();

        QueryIndex index = new QueryIndex();

        index.setName("idx_business_id");
        index.setIndexType(QueryIndexType.SORTED);

        LinkedHashMap<String, Boolean> indFlds = new LinkedHashMap<>();

        indFlds.put("businessId", false);

        index.setFields(indFlds);
        indexes.add(index);

        qryEntity.setIndexes(indexes);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create JDBC type for "jdbcTypeBusinessOnlineInfo".
     *
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     **/
    private static JdbcType jdbcTypeBusinessOnlineInfo(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType(Integer.class);
        type.setValueType("model.BusinessOnlineInfo");
        type.setDatabaseSchema("test_ignite");
        type.setDatabaseTable("business_online_info");

        type.setKeyFields(new JdbcTypeField(Types.INTEGER, "info_id", int.class, "infoId"));

        type.setValueFields(
                new JdbcTypeField(Types.INTEGER, "business_id", int.class, "businessId"),
                new JdbcTypeField(Types.INTEGER, "year", int.class, "year"),
                new JdbcTypeField(Types.INTEGER, "month", int.class, "month"),
                new JdbcTypeField(Types.DECIMAL, "amount", BigDecimal.class, "amount"),
                new JdbcTypeField(Types.INTEGER, "create_user", int.class, "createUser"),
                new JdbcTypeField(Types.TIMESTAMP, "create_time", Timestamp.class, "createTime"),
                new JdbcTypeField(Types.INTEGER, "update_user", Integer.class, "updateUser"),
                new JdbcTypeField(Types.TIMESTAMP, "update_time", Timestamp.class, "updateTime"),
                new JdbcTypeField(Types.BIT, "del_flg", boolean.class, "delFlg")
        );

        return type;
    }

    /**
     * Create configuration for cache "BusinessSupporterCache".
     *
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheBusinessSupporterCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("CRMBS");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override
            public DataSource create() {
                return DataSources.INSTANCE_dsGeneric_DcBid;
            }

            ;
        });

        cacheStoreFactory.setDialect(new BasicJdbcDialect());

        cacheStoreFactory.setTypes(jdbcTypeBusinessSupporter(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.Integer");
        qryEntity.setValueType("model.BusinessSupporter");
        qryEntity.setTableName("business_supporter");
        qryEntity.setKeyFieldName("supporterId");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("supporterId");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("businessId", "java.lang.Integer");
        fields.put("businessName", "java.lang.String");
        fields.put("customerId", "java.lang.Integer");
        fields.put("userId", "java.lang.Integer");
        fields.put("achievementRadio", "java.math.BigDecimal");
        fields.put("commissionRadio", "java.math.BigDecimal");
        fields.put("supporterStatus", "java.lang.Byte");
        fields.put("delFlg", "java.lang.Boolean");
        fields.put("createUser", "java.lang.Integer");
        fields.put("createTime", "java.sql.Timestamp");
        fields.put("updateUser", "java.lang.Integer");
        fields.put("updateTime", "java.sql.Timestamp");
        fields.put("type", "java.lang.Boolean");
        fields.put("attachment", "java.lang.String");
        fields.put("approveUser", "java.lang.Integer");
        fields.put("approveName", "java.lang.String");
        fields.put("approveComment", "java.lang.String");
        fields.put("approveTime", "java.sql.Timestamp");
        fields.put("deputyGeneralId", "java.lang.Integer");
        fields.put("cityManagerId", "java.lang.Integer");
        fields.put("regionalManagerId", "java.lang.Integer");
        fields.put("departId", "java.lang.Integer");
        fields.put("cityId", "java.lang.Integer");
        fields.put("regionalId", "java.lang.Integer");
        fields.put("saleCenterId", "java.lang.Integer");
        fields.put("approveStatus", "java.lang.Byte");
        fields.put("supporterId", "java.lang.Integer");

        qryEntity.setFields(fields);

        HashMap<String, String> aliases = new HashMap<>();

        aliases.put("supporterId", "supporter_id");
        aliases.put("businessId", "business_id");
        aliases.put("businessName", "business_name");
        aliases.put("customerId", "customer_id");
        aliases.put("userId", "user_id");
        aliases.put("achievementRadio", "achievement_radio");
        aliases.put("commissionRadio", "commission_radio");
        aliases.put("supporterStatus", "supporter_status");
        aliases.put("delFlg", "del_flg");
        aliases.put("createUser", "create_user");
        aliases.put("createTime", "create_time");
        aliases.put("updateUser", "update_user");
        aliases.put("updateTime", "update_time");
        aliases.put("approveUser", "approve_user");
        aliases.put("approveName", "approve_name");
        aliases.put("approveComment", "approve_comment");
        aliases.put("approveTime", "approve_time");
        aliases.put("deputyGeneralId", "deputy_general_id");
        aliases.put("cityManagerId", "city_manager_id");
        aliases.put("regionalManagerId", "regional_manager_id");
        aliases.put("departId", "depart_id");
        aliases.put("cityId", "city_id");
        aliases.put("regionalId", "regional_id");
        aliases.put("saleCenterId", "sale_center_id");
        aliases.put("approveStatus", "approve_status");

        qryEntity.setAliases(aliases);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create JDBC type for "jdbcTypeBusinessSupporter".
     *
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     **/
    private static JdbcType jdbcTypeBusinessSupporter(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType(Integer.class);
        type.setValueType("model.BusinessSupporter");
        type.setDatabaseSchema("test_ignite");
        type.setDatabaseTable("business_supporter");

        type.setKeyFields(new JdbcTypeField(Types.INTEGER, "supporter_id", int.class, "supporterId"));

        type.setValueFields(
                new JdbcTypeField(Types.INTEGER, "business_id", int.class, "businessId"),
                new JdbcTypeField(Types.VARCHAR, "business_name", String.class, "businessName"),
                new JdbcTypeField(Types.INTEGER, "customer_id", int.class, "customerId"),
                new JdbcTypeField(Types.INTEGER, "user_id", Integer.class, "userId"),
                new JdbcTypeField(Types.DECIMAL, "achievement_radio", BigDecimal.class, "achievementRadio"),
                new JdbcTypeField(Types.DECIMAL, "commission_radio", BigDecimal.class, "commissionRadio"),
                new JdbcTypeField(Types.TINYINT, "supporter_status", byte.class, "supporterStatus"),
                new JdbcTypeField(Types.BIT, "del_flg", boolean.class, "delFlg"),
                new JdbcTypeField(Types.INTEGER, "create_user", int.class, "createUser"),
                new JdbcTypeField(Types.TIMESTAMP, "create_time", Timestamp.class, "createTime"),
                new JdbcTypeField(Types.INTEGER, "update_user", Integer.class, "updateUser"),
                new JdbcTypeField(Types.TIMESTAMP, "update_time", Timestamp.class, "updateTime"),
                new JdbcTypeField(Types.BIT, "type", Boolean.class, "type"),
                new JdbcTypeField(Types.VARCHAR, "attachment", String.class, "attachment"),
                new JdbcTypeField(Types.INTEGER, "approve_user", Integer.class, "approveUser"),
                new JdbcTypeField(Types.VARCHAR, "approve_name", String.class, "approveName"),
                new JdbcTypeField(Types.VARCHAR, "approve_comment", String.class, "approveComment"),
                new JdbcTypeField(Types.TIMESTAMP, "approve_time", Timestamp.class, "approveTime"),
                new JdbcTypeField(Types.INTEGER, "deputy_general_id", Integer.class, "deputyGeneralId"),
                new JdbcTypeField(Types.INTEGER, "city_manager_id", Integer.class, "cityManagerId"),
                new JdbcTypeField(Types.INTEGER, "regional_manager_id", Integer.class, "regionalManagerId"),
                new JdbcTypeField(Types.INTEGER, "depart_id", Integer.class, "departId"),
                new JdbcTypeField(Types.INTEGER, "city_id", Integer.class, "cityId"),
                new JdbcTypeField(Types.INTEGER, "regional_id", Integer.class, "regionalId"),
                new JdbcTypeField(Types.INTEGER, "sale_center_id", Integer.class, "saleCenterId"),
                new JdbcTypeField(Types.TINYINT, "approve_status", Byte.class, "approveStatus")
        );

        return type;
    }

    /**
     * Create configuration for cache "CrmResultCache".
     *
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheCrmResultCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("CRMRESULT");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override
            public DataSource create() {
                return DataSources.INSTANCE_dsGeneric_DcBid;
            }

            ;
        });

        cacheStoreFactory.setDialect(new BasicJdbcDialect());

        cacheStoreFactory.setTypes(jdbcTypeCrmResult(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.String");
        qryEntity.setValueType("model.CrmResult");
        qryEntity.setTableName("crm_result");
        qryEntity.setKeyFieldName("userId");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("userId");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("year", "java.lang.Integer");
        fields.put("month", "java.lang.Integer");
        fields.put("onlineBusinessCount", "java.lang.Integer");
        fields.put("onlineBusinessCustomerCount", "java.lang.Integer");
        fields.put("onlineBusinessAmount", "java.lang.String");
        fields.put("userId", "java.lang.String");

        qryEntity.setFields(fields);

        HashMap<String, String> aliases = new HashMap<>();

        aliases.put("userId", "user_id");
        aliases.put("onlineBusinessCount", "online_business_count");
        aliases.put("onlineBusinessCustomerCount", "online_business_customer_count");
        aliases.put("onlineBusinessAmount", "online_business_amount");

        qryEntity.setAliases(aliases);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create JDBC type for "jdbcTypeCrmResult".
     *
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     **/
    private static JdbcType jdbcTypeCrmResult(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType(String.class);
        type.setValueType("model.CrmResult");
        type.setDatabaseSchema("test_ignite");
        type.setDatabaseTable("crm_result");

        type.setKeyFields(new JdbcTypeField(Types.VARCHAR, "user_id", String.class, "userId"));

        type.setValueFields(
                new JdbcTypeField(Types.INTEGER, "year", Integer.class, "year"),
                new JdbcTypeField(Types.INTEGER, "month", Integer.class, "month"),
                new JdbcTypeField(Types.INTEGER, "online_business_count", Integer.class, "onlineBusinessCount"),
                new JdbcTypeField(Types.INTEGER, "online_business_customer_count", Integer.class, "onlineBusinessCustomerCount"),
                new JdbcTypeField(Types.VARCHAR, "online_business_amount", String.class, "onlineBusinessAmount")
        );

        return type;
    }
}